---
description: 
globs: 
alwaysApply: false
---
Node.js Express TypeScript Guidelines with Supabase for Barbershop Booking
These guidelines define a Node.js Express TypeScript application using Supabase for a barbershop booking system, integrating Supabase Authentication, file uploads, and booking logic without requiring user authentication for bookings. The implementation follows clean code, modularity, TypeScript best practices, and SOLID principles.
TypeScript General Guidelines
Basic Principles

Use English for all code and documentation.
Always declare types for variables, function parameters, and return values.
Avoid any; define specific types/interfaces.
Create necessary types for type safety.


Use JSDoc to document public classes, functions, and middleware.
Avoid blank lines within functions.
One export per file to promote modularity.

Nomenclature

Use PascalCase for classes.
Use camelCase for variables, functions, and methods.
Use kebab-case for file and directory names.
Use UPPERCASE for environment variables and constants.
Avoid magic numbers; define constants with descriptive names.


Start function names with a verb (e.g., getBarber, createBooking).
Use verbs for booleans (e.g., isAvailable, hasError, canBook).
Use complete words, avoiding non-standard abbreviations.
Exceptions: standard abbreviations (e.g., API, URL) and well-known ones:
i, j for loops.
err for errors.
req, res, next for Express middleware parameters.





Functions

Functions include methods, route handlers, and middleware.
Write short functions with a single purpose (<20 lines).
Name functions with a verb and context:
Booleans: isX, hasX, canX (e.g., isBarberAvailable).
Void: executeX, saveX, uploadX (e.g., saveBooking).


Avoid nested blocks using:
Early returns for validation or error checks.
Utility functions to extract logic.


Use higher-order functions (map, filter, reduce) to simplify logic.
Arrow functions for simple logic (<3 lines).
Named functions for complex logic.


Use default parameters to avoid null/undefined checks.
Use RO-RO pattern (Request Object, Response Object):
Pass multiple parameters as a single object.
Return results as an object.
Define types/interfaces for inputs and outputs.


Maintain a single level of abstraction.

Data

Encapsulate primitive types in composite types (interfaces/classes).
Use classes with internal validation instead of inline checks.
Prefer immutability:
Use readonly for unchanging properties.
Use as const for immutable literals.


Define DTOs for API inputs/outputs, validated with zod.

Classes

Follow SOLID principles.
Prefer composition over inheritance.
Define interfaces for contracts (e.g., services, repositories).
Write small classes with a single responsibility:
<200 lines.
<10 public methods.
<10 properties.



Exceptions

Use exceptions for unexpected errors.
Catch exceptions only to:
Handle expected issues (e.g., barber not available).
Add context for debugging.


Use a global error-handling middleware for uncaught exceptions.

Testing

Follow Arrange-Act-Assert for unit tests.
Use clear variable names: inputX, mockX, actualX, expectedX.
Write unit tests for public functions, middleware, and Supabase operations.
Use test doubles (mocks/stubs) for dependencies.
Avoid mocking Supabase client unless necessary.


Write integration tests for API routes.
Follow Given-When-Then for readability.



Specific to Node.js, Express, TypeScript, Supabase, and Barbershop Booking
Basic Principles

Use modular architecture to organize the Express application.

Encapsulate API logic in modules based on domain:

Barbers: Manage barber profiles (requires auth).
Services: Manage service offerings (requires auth).
Bookings: Handle customer bookings (no auth required).
Images: Store style reference images for bookings.


Directory Structure:

src/:
api/:
barbers/:
barbers.routes.ts
barbers.controller.ts
barbers.service.ts
barbers.repository.ts
barbers.dto.ts
barbers.types.ts


services/:
services.routes.ts
services.controller.ts
services.service.ts
services.repository.ts
services.dto.ts
services.types.ts


bookings/:
bookings.routes.ts
bookings.controller.ts
bookings.service.ts
bookings.repository.ts
bookings.dto.ts
bookings.types.ts


images/:
images.routes.ts
images.controller.ts
images.service.ts
images.repository.ts
images.dto.ts
images.types.ts




common/:
configs/: env.config.ts
middleware/: auth.middleware.ts, file-validation.middleware.ts, logger.middleware.ts
utils/: file.utils.ts, date.utils.ts
validators/: custom.validators.ts
types/: supabase.types.ts


core/:
error.middleware.ts
supabase.client.ts
app.ts


tests/:
api/: Mirrors api/ structure for unit tests.
integration/: API route tests.




Module Structure:
One Express router per module.
One controller per router for HTTP requests.
One service per entity for business logic.
One repository per entity for Supabase operations.
DTOs validated with zod.
Types/interfaces for inputs/outputs.




Use TypeScript interfaces for request/response types.

Implement dependency injection for services and repositories (manual DI).

Use Supabase for:

Database: PostgreSQL tables (barbers, services, bookings, images).
Auth: Admin access for barber/service management.
Storage: Style reference images for bookings.


Booking Logic:

No authentication required for booking creation or retrieval.
Validate time slots for barber availability.
Store customer details (name, email, phone) per booking.
Allow optional style reference image uploads with bookings.


File Uploads:

Store images in a booking-images bucket (public or private).
Validate file types (JPEG, PNG) and sizes (<2MB).
Use unique paths (e.g., bookingId/timestamp-filename).


Common Module:

Include:
Configs: Environment variables and Supabase credentials.
Middleware: Auth, file validation, logging.
Utils: Date/time helpers, file utilities.
Validators: Custom zod validators.
Types: Supabase database types.




Core Module:

Error Middleware: Handle exceptions globally.
Global Middleware: Logging, CORS.
Supabase Client: Initialize database and auth.
App Setup: Express configuration.



Middleware

Authentication: Verify Supabase JWT for admin routes (barbers, services).
File Validation: Check file types/sizes for image uploads.
Booking Validation: Validate time slots and barber availability.
Use typed req, res, next (express.Request, express.Response, express.NextFunction).

Routes and Controllers

Define routes with Express Router.
Use async/await for Supabase queries and uploads.
Validate inputs with zod DTOs.
Return typed responses (e.g., { data, error }).

Supabase Integration

Tables:
barbers: Barber profiles.
services: Service offerings.
bookings: Customer bookings.
images: Style reference images.


Authentication:
Use Supabase Auth for admin users managing barbers/services.
Booking endpoints are public (no auth required).


File Uploads:
Store images in booking-images bucket.
Apply RLS to restrict access to authenticated admins or booking owners.


RLS Policies:
barbers, services: Authenticated admins only for write operations.
bookings: Public insert, authenticated admins for updates.
images: Public insert with booking, authenticated read.
Example SQL:CREATE POLICY "Public booking insert" ON public.bookings FOR INSERT WITH CHECK (true);
CREATE POLICY "Admin booking update" ON public.bookings FOR UPDATE USING (auth.role() = 'authenticated');
CREATE POLICY "Public image insert" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'booking-images');
CREATE POLICY "Authenticated image read" ON storage.objects FOR SELECT USING (auth.role() = 'authenticated' AND bucket_id = 'booking-images');




Handle Supabase errors in repositories.

Testing

Use Jest for unit and integration tests.
Write unit tests for:
Controllers: Mock services.
Services: Mock repositories.
Middleware: Test auth, file validation, booking logic.
Repositories: Mock Supabase client.


Write integration tests for API routes with supertest.
Add /test route per module for smoke tests.
Use Supabase test database for integration tests.

Example File Structure
src/
├── api/
│   ├── barbers/
│   │   ├── barbers.routes.ts
│   │   ├── barbers.controller.ts
│   │   ├── barbers.service.ts
│   │   ├── barbers.repository.ts
│   │   ├── barbers.dto.ts
│   │   ├── barbers.types.ts
│   ├── services/
│   │   ├── services.routes.ts
│   │   ├── services.controller.ts
│   │   ├── services.service.ts
│   │   ├── services.repository.ts
│   │   ├── services.dto.ts
│   │   ├── services.types.ts
│   ├── bookings/
│   │   ├── bookings.routes.ts
│   │   ├── bookings.controller.ts
│   │   ├── bookings.service.ts
│   │   ├── bookings.repository.ts
│   │   ├── bookings.dto.ts
│   │   ├── bookings.types.ts
│   ├── images/
│   │   ├── images.routes.ts
│   │   ├── images.controller.ts
│   │   ├── images.service.ts
│   │   ├── images.repository.ts
│   │   ├── images.dto.ts
│   │   ├── images.types.ts
├── common/
│   ├── configs/
│   │   ├── env.config.ts
│   ├── middleware/
│   │   ├── auth.middleware.ts
│   │   ├── file-validation.middleware.ts
│   │   ├── booking-validation.middleware.ts
│   │   ├── logger.middleware.ts
│   ├── utils/
│   │   ├── date.utils.ts
│   │   ├── file.utils.ts
│   ├── validators/
│   │   ├── custom.validators.ts
│   ├── types/
│   │   ├── supabase.types.ts
├── core/
│   ├── error.middleware.ts
│   ├── supabase.client.ts
│   ├── app.ts
├── tests/
│   ├── api/
│   │   ├── bookings/
│   │   │   ├── bookings.controller.test.ts
│   │   │   ├── bookings.service.test.ts
│   │   │   ├── bookings.repository.test.ts
│   ├── integration/
│   │   ├── bookings.api.test.ts
├── index.ts

Example Code Snippets
Supabase Client (core/supabase.client.ts)
import { createClient } from '@supabase/supabase-js';
import { Database } from '../common/types/supabase.types';

const supabaseUrl = process.env.SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_KEY || '';

export const supabase = createClient<Database>(supabaseUrl, supabaseKey);

Authentication Middleware (common/middleware/auth.middleware.ts)
import { Request, Response, NextFunction } from 'express';
import { supabase } from '../../core/supabase.client';

/** Verifies Supabase JWT for authenticated routes */
export async function authMiddleware(req: Request, res: Response, next: NextFunction): Promise<void> {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    res.status(401).json({ error: 'Unauthorized: Missing or invalid token' });
    return;
  }

  const token = authHeader.split(' ')[1];
  const { data, error } = await supabase.auth.getUser(token);

  if (error || !data.user) {
    res.status(401).json({ error: 'Unauthorized: Invalid token' });
    return;
  }

  req.user = data.user;
  next();
}

File Validation Middleware (common/middleware/file-validation.middleware.ts)
import { Request, Response, NextFunction } from 'express';

/** Validates uploaded file type and size */
export function validateFile(req: Request, res: Response, next: NextFunction): void {
  const file = req.file;
  if (!file) {
    res.status(400).json({ error: 'No file uploaded' });
    return;
  }

  const allowedTypes = ['image/jpeg', 'image/png'];
  const maxSize = 2 * 1024 * 1024; // 2MB

  if (!allowedTypes.includes(file.mimetype)) {
    res.status(400).json({ error: 'Invalid file type. Allowed: JPEG, PNG' });
    return;
  }

  if (file.size > maxSize) {
    res.status(400).json({ error: 'File size exceeds 2MB limit' });
    return;
  }

  next();
}

Booking Validation Middleware (common/middleware/booking-validation.middleware.ts)
import { Request, Response, NextFunction } from 'express';
import { supabase } from '../../core/supabase.client';
import { isTimeSlotAvailable } from '../../common/utils/date.utils';

/** Validates booking time slot and barber availability */
export async function validateBooking(req: Request, res: Response, next: NextFunction): Promise<void> {
  const { barberId, date, time, serviceId } = req.body;

  const { data: service, error: serviceError } = await supabase
    .from('services')
    .select('duration')
    .eq('id', serviceId)
    .single();
  if (serviceError || !service) {
    res.status(400).json({ error: 'Invalid service' });
    return;
  }

  const isAvailable = await isTimeSlotAvailable(barberId, date, time, service.duration);
  if (!isAvailable) {
    res.status(400).json({ error: 'Time slot not available' });
    return;
  }

  next();
}

Date Utils (common/utils/date.utils.ts)
import { supabase } from '../../core/supabase.client';

/** Checks if a time slot is available for a barber */
export async function isTimeSlotAvailable(barberId: string, date: string, time: string, duration: number): Promise<boolean> {
  const startTime = new Date(`${date}T${time}`);
  const endTime = new Date(startTime.getTime() + duration * 60 * 1000);

  const { data, error } = await supabase
    .from('bookings')
    .select('date, time, service_id')
    .eq('barber_id', barberId)
    .eq('date', date)
    .eq('status', 'confirmed');

  if (error) throw new Error(`Failed to check availability: ${error.message}`);

  for (const booking of data) {
    const bookingStart = new Date(`${booking.date}T${booking.time}`);
    const { data: service } = await supabase
      .from('services')
      .select('duration')
      .eq('id', booking.service_id)
      .single();
    const bookingEnd = new Date(bookingStart.getTime() + (service?.duration || 30) * 60 * 1000);

    if (startTime < bookingEnd && endTime > bookingStart) {
      return false;
    }
  }

  return true;
}

Bookings Routes (api/bookings/bookings.routes.ts)
import { Router } from 'express';
import { getBookings, createBooking } from './bookings.controller';
import { validateDto } from '../../common/middleware/validate.middleware';
import { validateBooking } from '../../common/middleware/booking-validation.middleware';
import { CreateBookingDtoSchema } from './bookings.dto';
import multer from 'multer';

const upload = multer({ storage: multer.memoryStorage() });
const router = Router();

router.get('/', getBookings);
router.post('/', upload.single('image'), validateDto(CreateBookingDtoSchema), validateBooking, createBooking);

export default router;

Bookings Controller (api/bookings/bookings.controller.ts)
import { Request, Response, NextFunction } from 'express';
import { BookingsService } from './bookings.service';
import { CreateBookingDto } from './bookings.dto';

/** Handles booking-related HTTP requests */
export async function getBookings(req: Request, res: Response, next: NextFunction): Promise<void> {
  try {
    const bookings = await BookingsService.getAllBookings();
    res.json({ data: bookings });
  } catch (err) {
    next(err);
  }
}

/** Creates a new booking */
export async function createBooking(req: Request, res: Response, next: NextFunction): Promise<void> {
  try {
    const dto: CreateBookingDto = req.body;
    const image = req.file;
    const booking = await BookingsService.createBooking(dto, image);
    res.status(201).json({ data: booking });
  } catch (err) {
    next(err);
  }
}

Bookings DTO (api/bookings/bookings.dto.ts)
import { z } from 'zod';

export const CreateBookingDtoSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Invalid email'),
  phone: z.string().min(10, 'Invalid phone number'),
  barberId: z.string().uuid('Invalid barber ID'),
  serviceId: z.string().uuid('Invalid service ID'),
  date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, 'Invalid date format (YYYY-MM-DD)'),
  time: z.string().regex(/^\d{2}:\d{2}$/, 'Invalid time format (HH:MM)'),
  comments: z.string().optional(),
  status: z.enum(['confirmed', 'pending', 'cancelled']).default('pending'),
});

export type CreateBookingDto = z.infer<typeof CreateBookingDtoSchema>;

Bookings Service (api/bookings/bookings.service.ts)
import { BookingsRepository } from './bookings.repository';
import { CreateBookingDto } from './bookings.dto';
import { Booking } from './bookings.types';

/** Manages booking business logic */
export class BookingsService {
  constructor(private readonly bookingsRepository: BookingsRepository) {}

  async getAllBookings(): Promise<Booking[]> {
    return this.bookingsRepository.findAll();
  }

  async createBooking(dto: CreateBookingDto, image?: Express.Multer.File): Promise<Booking> {
    return this.bookingsRepository.create(dto, image);
  }
}

Bookings Repository (api/bookings/bookings.repository.ts)
import { supabase } from '../../core/supabase.client';
import { CreateBookingDto } from './bookings.dto';
import { Booking } from './bookings.types';
import { v4 as uuidv4 } from 'uuid';

/** Handles booking data access and image uploads */
export class BookingsRepository {
  async findAll(): Promise<Booking[]> {
    const { data, error } = await supabase.from('bookings').select('*');
    if (error) throw new Error(`Failed to fetch bookings: ${error.message}`);
    return data as Booking[];
  }

  async create(dto: CreateBookingDto, image?: Express.Multer.File): Promise<Booking> {
    let imageUrl: string | null = null;
    if (image) {
      const fileName = `${uuidv4()}-${image.originalname}`;
      const filePath = `bookings/${fileName}`;
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('booking-images')
        .upload(filePath, image.buffer, {
          contentType: image.mimetype,
          upsert: false,
        });
      if (uploadError) throw new Error(`Failed to upload image: ${uploadError.message}`);
      imageUrl = `${process.env.SUPABASE_URL}/storage/v1/object/public/booking-images/${uploadData.path}`;
    }

    const bookingData = { ...dto, id: uuidv4(), image_url: imageUrl };
    const { data, error } = await supabase
      .from('bookings')
      .insert(bookingData)
      .select()
      .single();
    if (error) throw new Error(`Failed to create booking: ${error.message}`);
    return data as Booking;
  }
}

Bookings Types (api/bookings/bookings.types.ts)
export interface Booking {
  id: string;
  name: string;
  email: string;
  phone: string;
  barber_id: string;
  service_id: string;
  date: string;
  time: string;
  comments?: string;
  image_url?: string;
  status: 'confirmed' | 'pending' | 'cancelled';
  created_at: string;
}

Barbers Routes (api/barbers/barbers.routes.ts)
import { Router } from 'express';
import { getBarbers, createBarber } from './barbers.controller';
import { validateDto } from '../../common/middleware/validate.middleware';
import { authMiddleware } from '../../common/middleware/auth.middleware';
import { CreateBarberDtoSchema } from './barbers.dto';

const router = Router();

router.get('/', getBarbers);
router.post('/', authMiddleware, validateDto(CreateBarberDtoSchema), createBarber);

export default router;

Barbers Controller (api/barbers/barbers.controller.ts)
import { Request, Response, NextFunction } from 'express';
import { BarbersService } from './barbers.service';
import { CreateBarberDto } from './barbers.dto';

/** Handles barber-related HTTP requests */
export async function getBarbers(req: Request, res: Response, next: NextFunction): Promise<void> {
  try {
    const barbers = await BarbersService.getAllBarbers();
    res.json({ data: barbers });
  } catch (err) {
    next(err);
  }
}

/** Creates a new barber */
export async function createBarber(req: Request, res: Response, next: NextFunction): Promise<void> {
  try {
    const dto: CreateBarberDto = req.body;
    const barber = await BarbersService.createBarber(dto);
    res.status(201).json({ data: barber });
  } catch (err) {
    next(err);
  }
}

Barbers DTO (api/barbers/barbers.dto.ts)
import { z } from 'zod';

export const CreateBarberDtoSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Invalid email').optional(),
  phone: z.string().min(10, 'Invalid phone').optional(),
  photoUrl: z.string().url('Invalid URL').optional(),
  description: z.string().optional(),
  position: z.string().optional(),
  experience: z.string().optional(),
  isActive: z.boolean().default(true),
});

export type CreateBarberDto = z.infer<typeof CreateBarberDtoSchema>;

Barbers Service (api/barbers/barbers.service.ts)
import { BarbersRepository } from './barbers.repository';
import { CreateBarberDto } from './barbers.dto';
import { Barber } from './barbers.types';

/** Manages barber business logic */
export class BarbersService {
  constructor(private readonly barbersRepository: BarbersRepository) {}

  async getAllBarbers(): Promise<Barber[]> {
    return this.barbersRepository.findAll();
  }

  async createBarber(dto: CreateBarberDto): Promise<Barber> {
    return this.barbersRepository.create(dto);
  }
}

Barbers Repository (api/barbers/barbers.repository.ts)
import { supabase } from '../../core/supabase.client';
import { CreateBarberDto } from './barbers.dto';
import { Barber } from './barbers.types';
import { v4 as uuidv4 } from 'uuid';

/** Handles barber data access */
export class BarbersRepository {
  async findAll(): Promise<Barber[]> {
    const { data, error } = await supabase.from('barbers').select('*');
    if (error) throw new Error(`Failed to fetch barbers: ${error.message}`);
    return data as Barber[];
  }

  async create(dto: CreateBarberDto): Promise<Barber> {
    const barberData = { ...dto, id: uuidv4() };
    const { data, error } = await supabase
      .from('barbers')
      .insert(barberData)
      .select()
      .single();
    if (error) throw new Error(`Failed to create barber: ${error.message}`);
    return data as Barber;
  }
}

Barbers Types (api/barbers/barbers.types.ts)
export interface Barber {
  id: string;
  name: string;
  email?: string;
  phone?: string;
  photo_url?: string;
  description?: string;
  position?: string;
  experience?: string;
  is_active: boolean;
  created_at: string;
}

Supabase Types (common/types/supabase.types.ts)
export type Database = {
  public: {
    Tables: {
      barbers: {
        Row: {
          id: string;
          name: string;
          email: string | null;
          phone: string | null;
          photo_url: string | null;
          description: string | null;
          position: string | null;
          experience: string | null;
          is_active: boolean;
          created_at: string;
        };
        Insert: {
          id: string;
          name: string;
          email?: string | null;
          phone?: string | null;
          photo_url?: string | null;
          description?: string | null;
          position?: string | null;
          experience?: string | null;
          is_active?: boolean;
        };
      };
      services: {
        Row: {
          id: string;
          name: string;
          price: number;
          duration: number;
          created_at: string;
        };
        Insert: {
          id: string;
          name: string;
          price: number;
          duration: number;
        };
      };
      bookings: {
        Row: {
          id: string;
          name: string;
          email: string;
          phone: string;
          barber_id: string;
          service_id: string;
          date: string;
          time: string;
          comments: string | null;
          image_url: string | null;
          status: 'confirmed' | 'pending' | 'cancelled';
          created_at: string;
        };
        Insert: {
          id: string;
          name: string;
          email: string;
          phone: string;
          barber_id: string;
          service_id: string;
          date: string;
          time: string;
          comments?: string | null;
          image_url?: string | null;
          status?: 'confirmed' | 'pending' | 'cancelled';
        };
      };
      images: {
        Row: {
          id: string;
          booking_id: string;
          url: string;
          created_at: string;
        };
        Insert: {
          id: string;
          booking_id: string;
          url: string;
        };
      };
    };
  };
};

Error Middleware (core/error.middleware.ts)
import { Request, Response, NextFunction } from 'express';

export function errorMiddleware(err: Error, req: Request, res: Response, next: NextFunction): void {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal Server Error' });
}

App Setup (core/app.ts)
import express, { Express } from 'express';
import { errorMiddleware } from './error.middleware';
import barbersRouter from '../api/barbers/barbers.routes';
import bookingsRouter from '../api/bookings/bookings.routes';

export function createApp(): Express {
  const app = express();
  app.use(express.json());
  app.use('/api/barbers', barbersRouter);
  app.use('/api/bookings', bookingsRouter);
  app.use(errorMiddleware);
  return app;
}

Test (tests/api/bookings/bookings.repository.test.ts)
import { BookingsRepository } from '../../../api/bookings/bookings.repository';
import { supabase } from '../../../core/supabase.client';
import { Booking } from '../../../api/bookings/bookings.types';

jest.mock('../../../core/supabase.client');

describe('BookingsRepository', () => {
  let bookingsRepository: BookingsRepository;

  beforeEach(() => {
    bookingsRepository = new BookingsRepository();
  });

  it('should create a booking with image', async () => {
    const mockBooking: Booking = {
      id: 'booking1',
      name: 'John Doe',
      email: 'john@example.com',
      phone: '1234567890',
      barber_id: 'barber1',
      service_id: 'service1',
      date: '2025-05-15',
      time: '14:00',
      status: 'pending',
      created_at: '2025-05-10T10:00:00Z',
      image_url: 'http://supabase.com/storage/v1/object/public/booking-images/bookings/test.jpg',
    };
    const mockFile = { buffer: Buffer.from('test'), mimetype: 'image/jpeg', originalname: 'test.jpg' };
    (supabase.storage.from as jest.Mock).mockReturnValue({
      upload: jest.fn().mockResolvedValue({ data: { path: 'bookings/test.jpg' }, error: null }),
    });
    (supabase.from as jest.Mock).mockReturnValue({
      insert: jest.fn().mockReturnValue({
        select: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({ data: mockBooking, error: null }),
        }),
      }),
    });

    const result = await bookingsRepository.create(
      {
        name: 'John Doe',
        email: 'john@example.com',
        phone: '1234567890',
        barberId: 'barber1',
        serviceId: 'service1',
        date: '2025-05-15',
        time: '14:00',
        status: 'pending',
      },
      mockFile
    );

    expect(result).toEqual(mockBooking);
    expect(supabase.storage.from).toHaveBeenCalledWith('booking-images');
  });
});

Environment Variables
Create a .env file: Pantera:
SUPABASE_URL=your-supabase-url
SUPABASE_KEY=your-supabase-anon-key
PORT=3000

Supabase Setup

Create a Supabase project and obtain SUPABASE_URL and SUPABASE_KEY.
Set up tables:
barbers: As defined.
services: As defined.
bookings: As defined.
images: As defined.


Create booking-images bucket (public).
Enable RLS:CREATE POLICY "Public booking insert" ON public.bookings FOR INSERT WITH CHECK (true);
CREATE POLICY "Public booking read" ON public.bookings FOR SELECT USING (true);
CREATE POLICY "Admin booking update" ON public.bookings FOR UPDATE USING (auth.role() = 'authenticated');
CREATE POLICY "Public barber read" ON public.barbers FOR SELECT USING (true);
CREATE POLICY "Admin barber write" ON public.barbers FOR ALL USING (auth.role() = 'authenticated');
CREATE POLICY "Public service read" ON public.services FOR SELECT USING (true);
CREATE POLICY "Admin service write" ON public.services FOR ALL USING (auth.role() = 'authenticated');
CREATE POLICY "Public image insert" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'booking-images');
CREATE POLICY "Public image read" ON storage.objects FOR SELECT USING (bucket_id = 'booking-images');


Generate TypeScript types:supabase gen types typescript --project-id <project-id> > src/common/types/supabase.types.ts



Dependencies

Runtime: express, dotenv, zod, @supabase/supabase-js, multer, uuid.
Dev: @types/express, @types/multer, @types/uuid, jest, @types/jest, ts-jest, supertest, typescript, @types/supertest.


